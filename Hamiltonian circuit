#include <stdio.h>

#define N 5 // Number of vertices

int graph[N][N] = {
    {0, 1, 1, 1, 0},
    {1, 0, 1, 0, 1},
    {1, 1, 0, 1, 1},
    {1, 0, 1, 0, 1},
    {0, 1, 1, 1, 0}
};

int path[N];

void backtrack(int v, int pos) {
    if (pos == N) {
        // Check if there is an edge from the last vertex to the first vertex
        if (graph[path[pos - 1]][path[0]] == 1) {
            printf("Hamiltonian circuit found: ");
            for (int i = 0; i < N; i++) {
                printf("%d ", path[i]);
            }
            printf("%d\n", path[0]);
        }
        return;
    }

    for (int i = 0; i < N; i++) {
        if (graph[v][i] == 1 && path[pos] == 0) {
            path[pos] = i;
            backtrack(i, pos + 1);
            path[pos] = 0;
        }
    }
}

int main() {
    path[0] = 0; // Start at vertex 0
    backtrack(0, 1);
    return 0;
}
