#include <stdio.h>

#define MAX 100

struct Edge {
    int u, v, weight;
};

int parent[MAX];

int find(int i) {
    while (parent[i] != i)
        i = parent[i];
    return i;
}

void unionSet(int i, int j) {
    int a = find(i);
    int b = find(j);
    parent[a] = b;
}

void sortEdges(struct Edge edges[], int n) {
    struct Edge temp;
    for (int i = 0; i < n - 1; i++) {
        for (int j = i + 1; j < n; j++) {
            if (edges[i].weight > edges[j].weight) {
                temp = edges[i];
                edges[i] = edges[j];
                edges[j] = temp;
            }
        }
    }
}

void kruskal(struct Edge edges[], int n, int e) {
    int i, j = 0;
    int mstWeight = 0;

    for (i = 0; i < n; i++)
        parent[i] = i;

    sortEdges(edges, e);

    for (i = 0; i < e; i++) {
        int u = edges[i].u;
        int v = edges[i].v;

        if (find(u) != find(v)) {
            printf("Edge (%d, %d) included in MST with weight %d\n", u, v, edges[i].weight);
            mstWeight += edges[i].weight;
            unionSet(u, v);
            j++;
        }

        if (j == n - 1)
            break;
    }

    printf("Total weight of MST = %d\n", mstWeight);
}

int main() {
    int n, e;

    printf("Enter the number of vertices: ");
    scanf("%d", &n);
    printf("Enter the number of edges: ");
    scanf("%d", &e);

    struct Edge edges[MAX];

    for (int i = 0; i < e; i++) {
        printf("Enter edge %d (u, v, weight): ", i + 1);
        scanf("%d %d %d", &edges[i].u, &edges[i].v, &edges[i].weight);
    }

    kruskal(edges, n, e);

    return 0;
}


